generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  emailVerified       DateTime?
  image               String?
  onboardingCompleted Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  accounts            Account[]
  budgets             Budget[]
  categories          Category[]
  sessions            Session[]
  transactions        Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id           String           @id @default(cuid())
  name         String
  userId       String
  description  String?
  icon         String?
  color        String?
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgets      Budget[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
}

model Budget {
  id          String       @id @default(cuid())
  userId      String
  bname       String?
  description String?
  categoryId  String?
  currency    String    @default("CAD")
  amount      Decimal   @db.Decimal(10, 2)
  period      String
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}

model Transaction {
  id              String       @id @default(cuid())
  userId          String
  categoryId      String?
  transactionType String
  source          String?
  currency        String    @default("CAD")
  amount          Decimal   @db.Decimal(10, 2)
  transactionDate DateTime  @db.Date
  description     String?
  attachmentUrl   String?
  isActive        Boolean   @default(true)
  isRecurring     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  category        Category? @relation(fields: [categoryId], references: [id])
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([transactionDate])
}
